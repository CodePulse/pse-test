<?php

function commerce_extra_tokens_line_items($order, $theme = TRUE) {
  // Create the commerce order wrapper.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Set the orders currency code.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  // Load the inline styles for the table.
  $styles = _commerce_extra_tokens_inline_styles();

  // Define the table headers.
  $header = array(
    // array('data' => t('SKU'), 'style' => array('text-align: left;' . $styles['th_style'])),
    array('data' => t('Product'), 'style' => array('text-align: left;' . $styles['th_style'])),
    array('data' => t('Cost'), 'style' => array('text-align: right;' . $styles['th_style'])),
    array('data' => t('Qty'), 'style' => array('text-align: right;' . $styles['th_style'])),
    array('data' => t('Price (@currency_code)', array('@currency_code' => $currency_code)), 'style' => array('text-align: right;' . $styles['th_style'])),
  );

  $rows = array();

  $product_types = array();

  foreach (commerce_product_types() as $commerce_product_type) {
    $product_types[] = $commerce_product_type['type'];
  }

  // Loop through the line items in the order.
  foreach ($wrapper->commerce_line_items as $line_item_wrapper) {

    // Create cases for each line item type.
    switch ($line_item_wrapper->type->value()) {

      // If the line item is a product reference.
      case (in_array($line_item_wrapper->type->value(), $product_types)):
        $sku = $line_item_wrapper->commerce_product->sku->value();
        // Use the product title instead of the line item title for products.
        $title = htmlentities($line_item_wrapper->commerce_product->title->value(), ENT_QUOTES, 'UTF-8');

        $rows[] = array(
          'data' => array(
            // array('data' => $sku, 'style' => array('text-align: left;' . $styles['td_style'])),
            array('data' => $title, 'style' => array('text-align: left;' . $styles['td_style'])),
            array('data' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 'style' => array('text-align: right;' . $styles['td_style'])),
            array('data' => $line_item_wrapper->quantity->value(), 'style' => array('text-align: right;' . $styles['td_style'])),
            array('data' => commerce_currency_format($line_item_wrapper->commerce_total->amount->value(), $currency_code), 'style' => array('text-align: right;' . $styles['td_style'])),
          )
        );
        break;
      // If the line item type is a shipping line item.
      case 'shipping':
        $rows[] = array(
          'data' => array(
            array('data' => 'Shipping Service', 'header' => true, 'colspan' => '2', 'style' => array('text-align: left;' . $styles['th_style'])),
            array('data' => '', 'header' => true, 'style' => array('text-align: left;' . $styles['th_style'])),
            array('data' => '', 'header' => true, 'style' => array('text-align: left;' . $styles['th_style'])),
            array('data' => 'Cost', 'header' => true, 'style' => array('text-align: right;' . $styles['th_style'])),
          ),
          'no_striping' => true
        );
        $rows[] = array(
          'data' => array(
            array('data' => htmlentities($line_item_wrapper->line_item_label->value(), ENT_QUOTES, 'UTF-8'), 'style' => array('text-align: left;' . $styles['td_style'])),
            ' ',
            ' ',
            ' ',
            array('data' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 'style' => array('text-align: right;' . $styles['td_style'])),
          )
        );
        break;
      default:
        // Any other type of line item not defined above will be added here.
        $rows[] = array(
          'data' => array(
            ' ',
            array('data' => htmlentities($line_item_wrapper->line_item_label->value(), ENT_QUOTES, 'UTF-8'), 'style' => array('text-align: left;' . $styles['td_style'])),
            array('data' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 'style' => array('text-align: right;' . $styles['td_style'])),
            array('data' => 1, 'style' => array('text-align: right;' . $styles['td_style'])),
            array('data' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 'style' => array('text-align: right;' . $styles['td_style'])),
          )
        );
        break;
    }
  }

  if ($theme) {
    return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('cellspacing' => 0, 'style' => array($styles['table_style']))));
  }
  else {
    return array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => array('width: 50%; border: 1px solid #ddd;')));
  }
}

function commerce_extra_tokens_total($order, $theme = TRUE) {
  // Load the inline styles for the table.
  $styles = _commerce_extra_tokens_inline_styles();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  // Set the orders currency code.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
 
  // Set the order total amount.
  $amount = commerce_currency_format($wrapper->commerce_order_total->amount->value(), $currency_code);

  $data = $wrapper->commerce_order_total->data->value();
  if (!empty($data['components'])) {

    foreach ($data['components'] as $key => &$component) {

      if ($data['components'][$key]['name'] == 'base_price') {
        $rows[] = array(
          'data' => array(
            array('data' => t('Subtotal:'), 'style' => array('font-weight: bold; text-align: right;' . $styles['td_style'])),
            array('data' => commerce_currency_format($data['components'][$key]['price']['amount'], $currency_code), 'style' => array('font-weight: bold; text-align: right;' . $styles['td_style'])),
          )
        );
      }
      elseif (preg_match('/^tax\|/', $data['components'][$key]['name'])) {
        $rows[] = array(
          'data' => array(
            array('data' => $data['components'][$key]['price']['data']['tax_rate']['display_title'] . ':', 'style' => array('font-weight: bold; text-align: right;' . $styles['td_style'])),
            array('data' => commerce_currency_format($data['components'][$key]['price']['amount'], $currency_code), 'style' => array('font-weight: bold; text-align: right;' . $styles['td_style'])),
          )
        );
      }
    }
  }

  $rows[] = array(
    'data' => array(
      array('data' => t('Total:'), 'style' => array('font-weight: bold; text-align: right;' . $styles['td_style'])),
      array('data' => $amount, 'style' => array('font-weight: bold; text-align: right;' . $styles['td_style'])),
    )
  );
  if ($theme) {
    return theme('table', array('rows' => $rows, 'attributes' => array('cellspacing' => 0, 'style' => array($styles['table_style']))));
  }
  else {
    return array('rows' => $rows, 'attributes' => array('style' => array('width: 50%; border: 1px solid #ddd;')));
  }
}

function commerce_extra_tokens_payments($order, $theme = TRUE) {
  // Load the inline styles for the table.
  $styles = _commerce_extra_tokens_inline_styles();

  if (function_exists('commerce_payment_transaction_load_multiple')) {
    $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
    if (!empty($transactions)) {
      $header = array(
        array(
          'data' => 'Payments',
          'header' => true,
          'colspan' => '2',
          'style' => array('text-align: left;' . $styles['th_style']),
        ),
      );

      $payment_methods = commerce_payment_methods();
      foreach ($transactions as $transaction) {
        $payment_title = $payment_methods[$transaction->payment_method]['title'];
        $rows[] = array(
          'data' => array(
            array(
              'data' => $payment_title,
              'style' => array('text-align: left;' . $styles['td_style']),
            ),
            array(
              'data' => commerce_currency_format($transaction->amount, $transaction->currency_code),
              'style' => array('text-align: right;' . $styles['td_style']),
            ),
          ),
        );
      }
      if ($theme) {
        return theme('table', array('rows' => $rows, 'attributes' => array('cellspacing' => 0, 'style' => array($styles['table_style']))));
      }
      else {
        return array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => array('width: 50%; border: 1px solid #ddd;')));
      }
    }
  }
}

function _commerce_extra_tokens_inline_styles() {
  // Define the inline table styles as an array.
  $inline_styles = array(
    'table_style' => 'width: 100%; border: none; border-spacing: 0; font-family: Calibri, Ariel; font-size: 12pt;',
    'th_style' => 'padding: 10px 14px; border: none; border-bottom: 1px solid #ddd; font-family: Calibri, Ariel; font-size: 12pt;',
    'td_style' => 'padding: 10px 14px; vertical-align: middle; font-family: Calibri, Ariel; font-size: 12pt;',
  );

  // Allow other modules to override these styles.
  drupal_alter('commerce_extra_tokens_inline_styles', $inline_styles);

  return $inline_styles;
}
