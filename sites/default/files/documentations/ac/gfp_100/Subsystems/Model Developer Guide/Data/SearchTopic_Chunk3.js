define({"221":{i:0.00438989141447474,u:"../Content/Topics/x12953.html",a:"Once one or more Initialisation Procedures have been specified for a  Model , one can be selected for use\n in a simulation by specifying it in the Process. The syntax is very simple: INITIALISATION_PROCEDURE\n  USE\n    unitname : ipname ;\n  END where unitname is the name of the Model instance ...",t:"Specifying which Initialisation Procedures to use in the Process"},"222":{i:0.00174487739059874,u:"../Content/Topics/x12964.html",a:"One one or more Initialisation Procedures have been defined in the Models and a Process, as described previously, gPROMS can then use them when\n performing a simulation activity. In order to do this, simply execute the Process as usual and then when the Execution control dialog appears select\n one ...",t:"Performing a simulation activity using Initialisation Procedures"},"223":{i:0.00174487739059874,u:"../Content/Topics/x12981.html",a:"Specifying initialisation procedures for composite Models is very similar to that of non-composite Models but with two additional\n complications: the sub Models within the composite model may also contain Initialisation Procedures, and there needs to be some mechanism for choosing which\n of these to ...",t:"Initialisation Procedures for Composite Models"},"224":{i:0.00223927041332114,u:"../Content/Topics/x12997.html",a:"The syntax of the USE section in composite Models is similar to that for Processes (see  Specifying which\n Initialisation Procedures to use in the Process ). There are some additional features needed for composite Models that contain more than one\n sub Model. In this case, the USE section may ...",t:"The USE Section for Composite Models"},"225":{i:0.00223927041332114,u:"../Content/Topics/x13052.html",a:"Synchronisation of the various Initialisations Procedures for non-composite Models is specified using NEXT sections, as has been described\n before ( Specifying the sequence of Actions in Initialisations Procedures ). For composite Models, the same\n procedures apply in addition to being able to ...",t:"Synchronising the Initialisation Procedures of sub Models"},"226":{i:0.00174487739059874,u:"../Content/Topics/x13175.html",a:"The following conventions are used in describing the syntax of Initialisation Procedures. gPROMS language keywords are shown coloured in CAPITALS, even though the language is case-insensitive Identifiers are shown in the italic font: identifier An optional language construct is enclosed in brackets, ...",t:"Reference"},"227":{i:0.00174487739059874,u:"../Content/Topics/x13193.html",a:"The syntax for specifying an initialisation procedure in a Model is: INITIALISATION_PROCEDURE ipname [DEFAULT]\n  [USE section]\n  [START section]\n  [NEXT section]* A Model can have more than one initialisation procedure, each of which must have a uniquely defined name in the same Model. The following ...",t:"Specifying Initialisation Procedures in Models"},"228":{i:0.00174487739059874,u:"../Content/Topics/x13218.html",a:"The syntax for specifying an initialisation procedure in a Process is: INITIALISATION_PROCEDURE ipname [DEFAULT]\n  \u003cUSE section\u003e\n  [SAVE filename;] Only one IP specification is allowed in a Process. The SAVE task is optional and the USE section is compulsory.",t:"Specifying Initialisation Procedures in Processes"},"229":{i:0.00223927041332114,u:"../Content/Topics/x13225.html",a:"The USE section defines which Initialisation Procedures are applied for any Units present in the Model or Process. The USE section is\n compulsory for an IP in a Process but optional for IPs in a Model. The syntax of the USE section is: USE\n  [: DEFAULT ;]\n  [unitname : ipname|DEFAULT|NONE ;]*\n  ...",t:"The USE section"},"230":{i:0.00372244948148834,u:"../Content/Topics/x13250.html",a:"The START section may only appear in Models. There may only be one START section and it must contain at least one modification of the standard\n Initialisation Procedure. The syntax is: START\n  \u003cmodification of the standard IP\u003e*\nEND The modifications can be one of the following: changes to the value ...",t:"The START section"},"231":{i:0.00174487739059874,u:"../Content/Topics/x13286.html",a:"During an Initialisation Procedure, CASE statements are free to change branches based on the values of the Variables at each step of the\n Initialisation Procedure. However, the branches of any CASE specified in the START section can, of course, be changed explicitly in a  NEXT  section. The final ...",t:"Behaviour of CASE statements during Initialisation Procedures"},"232":{i:0.00298085994740474,u:"../Content/Topics/x13291.html",a:"After the first initialisation problem is solved (that specified by the modifications in the START section to the gIP), a sequence of actions\n may be performed in order to restore these modifications back to the initialisation problem specified in the SET, ASSIGN and INITIALSELECTOR sections\n of the ...",t:"The NEXT section"},"233":{i:0.00174487739059874,u:"../Content/Topics/x13300.html",a:"Elementary UIP tasks in a NEXT section declare the change of the UIP to be applied in the next step; they may be one of the following: changes to the value of a Parameter changes to the choice of a Degrees of Freedom (DoF) (i.e., changing the ASSIGNment of one Variable to an ASSIGNment of another) ...",t:"Elementary UIP actions"},"234":{i:0.00174487739059874,u:"../Content/Topics/x13321.html",a:"If, after the final NEXT section has been processed, one or more modifications of the Initialisation Procedure have not been REVERTed, a final implicit step will\n be performed where all remaining modifications are REVERTed to their original values in parallel. Implicit final steps are always ...",t:"Implicit Final Step"},"235":{i:0.00174487739059874,u:"../Content/Topics/x13324.html",a:"If a Model contains Units, then the Initialisation Procedure may control the advancing of steps for any of the Units\u0027 Initialisation\n Procedures. The ADVANCE task is used to do this within any of the NEXT sections: NEXT\n  ADVANCE unitname ;\n  ADVANCE [modelname] ;\nEND The first line advances the IP ...",t:"Advancing Initialisation Procedures of Units"},"236":{i:0.00174487739059874,u:"../Content/Topics/x13347.html",a:"UIPs support discrete or continuous changes as advanced initialisation mechanisms. Algorithmically, discrete changes will be solved by\n conventional algorithms for the solution of non-linear algebraic systems. Continuous changes will be solved by a continuation method using DAE\n solvers. In case of ...",t:"UIP Algorithms"},});