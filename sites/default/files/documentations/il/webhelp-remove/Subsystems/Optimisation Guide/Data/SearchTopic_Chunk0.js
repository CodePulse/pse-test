define({"0":{i:0.0118106607057657,u:"../Content/Topics/x257.html",a:"gPROMS can be used to optimise the steady-state and/or the dynamic behaviour of a continuous or batch process. Both plant design and operational optimisation can be carried out. The form of the objective function and the constraints can be quite general. Moreover, the optimisation decision variables ...",t:"Introduction"},"1":{i:0.0118106607057657,u:"../Content/Topics/x279.html",a:"In order to introduce the various elements of the definition of the problem of dynamic optimisation, we consider the semi-batch reactor shown in\n the figure below. Two exothermic reactions are taking place: where A and B are the raw materials, C the desirable product, and D the unwanted by-product.  ...",t:"What is dynamic optimisation?"},"2":{i:0.023857685790828,u:"../Content/Topics/x311.html",a:"What is the mathematical problem? In this section we provide a mathematical statement of the class of dynamic optimisation problems solved by gPROMS.",t:"What is the mathematical problem?"},"3":{i:0.0610831727720122,u:"../Content/Topics/x314.html",a:"We consider processes described by mixed differential and algebraic equations of the form: Here x(t) and y(t) are the differential and algebraic\n      variables in the model while  are the time derivatives of the x(t) (i.e., ). u(t) are the control variables and v the time invariant\n parameters to ...",t:"The process model"},"4":{i:0.0291756468419459,u:"../Content/Topics/x355.html",a:"In general, gPROMS assumes that the initial t=0 condition of the system is described in terms of a set of general\n non-linear relations of the form: It is important to note that, once we fix the time variation of the controls, u(t) and the values of any time invariant\n parameters, v, the  modelling ...",t:"The initial conditions"},"5":{i:0.0156009505765869,u:"../Content/Topics/x371.html",a:"Dynamic optimisation in gPROMS seeks to determine the time horizon, tf, the values of the time invariant parameters, v, and the time variation of the control variables, u(t), over the entire time horizon , so as to minimise (or maximise) the final value of a single variable z. This can\n be written ...",t:"The objective function"},"6":{i:0.0156009505765869,u:"../Content/Topics/x473.html",a:"In practice, the time horizon tf will often be subject to certain lower and upper bounds: In some cases, tf will, in fact, be fixed at a given value, . This can be achieved simply by setting . As we have already seen in the batch reactor example, it is likely that the control variables and time ...",t:"Bounds on the optimisation decision variables"},"7":{i:0.0135931130624099,u:"../Content/Topics/x517.html",a:"In some applications, it is necessary to impose certain conditions that the system must satisfy at the end of the\n operation. These are called end-point constraints. For instance, in the batch reactor example, we may require: the final amount of material in the reactor to be at certain prescribed ...",t:"End-point constraints"},"8":{i:0.0135931130624099,u:"../Content/Topics/x550.html",a:"We can also have constraints that hold at one or more distinct times tI during the time horizon\n (e.g. at the middle of the horizon). These are called interior-point constraints. These may be represented mathematically as: where w is a system variable, and tl is a given time. We note that both ...",t:"Interior-point constraints"},"9":{i:0.0233649590953858,u:"../Content/Topics/x568.html",a:"We may also have certain constraints that must be satisfied at all times during the system operation. If these\n        path constraints are equalities, then often they can simply be added to the  system model \n        effectively converting one of the control variables u(t) into an algebraic ...",t:"Path constraints"},"10":{i:0.0118106607057657,u:"../Content/Topics/x603.html",a:"Let us start by summarising the mathematical statement of the dynamic optimisation problem as defined in:  What is the mathematical model? : Mathematical statement of the dynamic optimisation problem Objective functionsubject to Process model Initial conditions Time horizon bounds Control variable ...",t:"What is a \"solution\u0027\u0027 of a dynamic optimisation problem?"},"11":{i:0.0118106607057657,u:"../Content/Topics/x762.html",a:"For the above dynamic optimisation problem to be well defined, we need to be rather more specific regarding the type of\n the variation of the control variables over time that we are willing to consider. For instance, we could have:  Different types of control variable profile Piecewise-constant ...",t:"Classes of control variable profile"},"12":{i:0.0118106607057657,u:"../Content/Topics/x782.html",a:" Different types of control variable profile The dynamic optimisation facilities in gPROMS support piecewise-constant and piecewise-linear controls of the types shown in subfigures (a) and\n (b) respectively. These are by far the most commonly encountered in practical applications. However, if ...",t:"Control variable profiles in gPROMS"},"13":{i:0.0303832897680545,u:"../Content/Topics/x888.html",a:"Most of the information needed for specifying dynamic optimisation problems in gPROMS will be present in the various entities used for dynamic\n simulation of the process. Some additional information will have to be specified in separate entities. We consider each of these sources of information in ...",t:"Specifying dynamic optimisation problems in gPROMS"},"14":{i:0.0233649590953858,u:"../Content/Topics/x892.html",a:"Just like a dynamic simulation experiment, a dynamic optimisation problem in gPROMS is defined in a Process entity. In fact, there is no\n difference in syntax between a simulation and an optimisation Process. Thus, the latter specifies most of the information required for defining\n mathematically ...",t:"Process entities for optimisation"},"15":{i:0.0167757859170167,u:"../Content/Topics/x924.html",a:"The complete specification of a dynamic optimisation problem requires some additional information which is not provided in the gPROMS Process\n entity. This includes information on the time horizon and the objective function, the form of the control variable profiles, and any end-point and\n path ...",t:"The Optimisation entity"},"16":{i:0.0135931130624099,u:"../Content/Topics/x1087.html",a:"All of the variables specified as PIECEWISE_CONSTANT, PIECEWISE_LINEAR and TIME_INVARIANT must be Assigned in the gPROMS Process entity. Any\n variables that are Assigned in the Process entity but are not included here will retain the value(s) which are assigned to\n them: these may be constants or ...",t:"Specifications of control variables and time-invariant parameters"},"17":{i:0.0135931130624099,u:"../Content/Topics/x1121.html",a:"The INTERIORPOINT specifications force the named variable to lie within the specified lower and upper bounds at a set of discrete times,\n namely the time-interval boundaries 1 This includes the initial point but not the final one. An ENDPOINT_INEQUALITY specification should be used to\n enforce a ...",t:"Interior-point constraints"},"18":{i:0.0135931130624099,u:"../Content/Topics/x1153.html",a:"It is worth noting that enforcing a path constraint at the interval boundaries does not automatically guarantee that the\n constraints are not violated within the intervals. For many applications, this is not a major problem as path constraints tend\n to be \"soft\u0027\u0027 and minor violations can be ...",t:"Inequality path constraints"},"19":{i:0.0118106607057657,u:"../Content/Topics/x1202.html",a:"By default, gPROMS treats optimisation problems as dynamic ones, optimising the behaviour of a system over a finite non-negative time horizon.\n However, in some cases, it is desired to optimise a system at a single time pointâ€“performing a so-called \"point\" optimisation. From the mathematical\n point ...",t:"Point Optimisation"},"20":{i:0.0218498482766509,u:"../Content/Topics/x1205.html",a:"The specification of a point optimisation problem in gPROMS is achieved simply by omitting the HORIZON part of the\n corresponding Optimisation Entity. One can also use the following language to specify a point optimisation: OPTIMISATION_TYPE\n POINT It is worth noting that point Optimisation ...",t:"Specification of point Optimisation Entities"},"21":{i:0.0118106607057657,u:"../Content/Topics/x1223.html",a:"A steady-state optimisation problem is a special case of a point optimisation one. As such, its specification must obey all the rules outlined\n in:  point optimisation entities . If the underlying model is a dynamic one (i.e. its Model Entities contain one or more time derivative terms of the form ...",t:"Specification of steady-state optimisation problems"},"22":{i:0.0218498482766509,u:"../Content/Topics/x1321.html",a:"As explained in:  specifying dynamic optimisation problems , before an optimisation problem can be executed,\n it must be specified completely in a gPROMS project that contains: one or more Model entities; a Process entity named, for example, ppp; and an Optimisation entity named ppp. In order to run ...",t:"Running optimisation problems in gPROMS"},"23":{i:0.0118106607057657,u:"../Content/Topics/x1357.html",a:"The execution of an optimisation run will generate five files in the Results folder of the Case: PPP  PPP.out PPP.SCHEDULE PPP_SVS PPP.point where PPP is the name (in capitals) of the optimisation entity that has been executed to produce these results\n (cf. running optimisation problems ).",t:"Results of the optimisation run"},"24":{i:0.0118106607057657,u:"../Content/Topics/x1380.html",a:"Double-clicking on the report entry, PPP, in the Case tree causes a report window to appear in the main window, see the\n figure below. The report, presented in HTML format, includes: a table of contents that allows quick access to the information listed below via \"hyperlinks\"; general information ...",t:"The comprehensive optimisation report file"},"25":{i:0.0118106607057657,u:"../Content/Topics/x1406.html",a:"The PPP.out file contains a summary report on the optimisation run in a simple text format, including: the outcome of the optimisation run; the final value of the objective function; the final value of the time horizon and the lengths of the time intervals; the final values of the time-invariant ...",t:"The optimisation report file"},"26":{i:0.0118106607057657,u:"../Content/Topics/x1425.html",a:"The PPP.Schedule presents the most recent optimisation solution point in the form of a gPROMS\n Schedule. A  sample PPP.SCHEDULE file  is listed in the dynamic optimisation example at the end\n of this guide. The Schedule file can be used to reproduce the detailed results of the optimisation by ...",t:"The SCHEDULE file and the Saved Variable Set"},"27":{i:0.0118106607057657,u:"../Content/Topics/x1450.html",a:"The PPP.point file is generated at every iteration of the optimisation calculation. It contains the same information as\n the Schedule file, but in the format of an Optimisation entity (except that constraints are not reproduced). This is useful if there is a need to\n restart an optimisation after a ...",t:"The point file"},"28":{i:0.0118106607057657,u:"../Content/Topics/x1458.html",a:"The following apply to the current version of gPROMS: The initial conditions specified in the Process entity must be: equations of the form: VariableName= Value ; where VariableName is the full gPROMS pathname of a differential or algebraic variable, and\n            Value is a numerical value; or ...",t:"Other features"},"29":{i:0.0118106607057657,u:"../Content/Topics/x1533.html",a:"There is one standard mathematical solvers for optimisation in gPROMS, CVP_SS . CVP_SS can solve optimisation problems with both discrete and\n continuous decision variables (\"mixed integer optimisation\"). Both steady-state and dynamic problems are supported. For dynamic optimisation problems CVP_SS ...",t:"Standard solvers for optimisation"},"30":{i:0.0218498482766509,u:"../Content/Topics/x1569.html",a:"CVP_SS can solve steady-state and dynamic optimisation problems with both continuous and discrete optimisation decision variables. The\n algorithmic parameters used by CVP_SS along with their default values are shown below. This is followed by a detailed description of each\n parameter. \"CVP_SS\" [ ...",t:"The CVP_SS solver"},"31":{i:0.0180015370598619,u:"../Content/Topics/x1588.html",a:"The OAERAP solver employs an outer approximation (OA) algorithm for the solution of the MINLP. As outlined in the algorithm below, this\n involves solving a sequence of simpler optimisation problems, including nonlinear programs (NLPs) at steps 1 and 3 and mixed integer linear programs\n (MILPs) at ...",t:"The OAERAP solver"},"32":{i:0.155763022139806,u:"../Content/Topics/NLPSQP.html",a:"The NLPSQP solver employs a sequential quadratic programming (SQP) method for the solution of a nonlinear programming (NLP) problem. NLPSQP is a new SQPÂ solver that was introduced with gPROMSÂ v4.0 and that supersedes the since deprecated solver  SRQPD . The\n\t\t\talgorithmic parameters used by NLPSQP ...",t:"The NLPSQP solver"},"33":{i:0.0841978149845058,u:"../Content/Topics/x1817.html",a:"The solver SRQPD is a deprecated solver since the release of gPROMSÂ v4.0 and is replaced by  NLPSQP Â as the standard solver for non-linear problems. SRQPD is only provided for backward-compatibility reasons and will be removed from the gPROMSÂ distribution in a future release. It is strongly ...",t:"The SRQPD solver"},"34":{i:0.0185582382736609,u:"../Content/Topics/x2199.html",a:"Dynamic Optimisation Example Here, an example of a dynamic optimisation is given using a batch-reactor Model.",t:"Dynamic Optimisation Example"},"35":{i:0.0118106607057657,u:"../Content/Topics/x2202.html",a:"Project tree ReactorOpt.gPJ  Project tree for the dynamic optimisation example.",t:"Project tree ReactorOpt.gPJ"},"36":{i:0.0118106607057657,u:"../Content/Topics/x2209.html",a:"Variable Type entities in ReactorOpt.gPJ  Variable Type entities in the ReactorOpt project.",t:"Variable Type entities in ReactorOpt.gPJ"},"37":{i:0.0156620935023057,u:"../Content/Topics/x2216.html",a:"#---------------------------------------------------------------\n# Model of an externally cooled batch reactor: A + B -\u003e C + D\n#\n# The reactor model takes into account mass and energy balances. \n#--------------------------------------------------------------- \nPARAMETER\n NoComp AS INTEGER\n a,b,rho ...",t:"Text contained within the Reactor Model entity"},"38":{i:0.0118106607057657,u:"../Content/Topics/x2219.html",a:"BatchReaction Model entity  BatchReaction Model entity for the dynamic optimisation example.",t:"BatchReaction Model entity"},"39":{i:0.0190084893592675,u:"../Content/Topics/x2226.html",a:"UNIT\n React AS BatchReaction\n\nASSIGN\n # This will be overridden in the Optimisation entity\n WITHIN React.Batch_Reactor DO\n FcW := 0.0 ;\n END\n\nPRESET\n REACT.BATCH_REACTOR.RATE := 7.28422E+00 ;\n REACT.BATCH_REACTOR.HR := 6.50000E+06 ;\n REACT.BATCH_REACTOR.C(1) := 4.44444E+03 ;\n ...",t:"Text contained within the OPTIMISE_REACTOR Process entity"},"40":{i:0.0156620935023057,u:"../Content/Topics/x2229.html",a:"Optimisation entity (OPTIMISE_REACTOR)  Optimisation entity for the dynamic optimisation example.",t:"Optimisation entity (OPTIMISE_REACTOR)"},"41":{i:0.0218498482766509,u:"../Content/Topics/x2236.html",a:"gPROMS Dynamic Optimisation\n \ngPROMS Process : OPTIMIZE_REACTOR\nFinal Optimisation Status : Optimal Solution Found\nObjective Function Being Maximised: 7642.78\n\nCurrent Values of Optimisation Decision Variables \n([*] denotes an active bound) \n \nDecision Variable Type Value Lower Bound Upper Bound\n ...",t:"Sample optimisation report file (OPTIMISE_REACTOR.out)"},"42":{i:0.0151570565627274,u:"../Content/Topics/x2239.html",a:"# \n# Schedule generated by gOPT for process OPTIMIZE_REACTOR\n# \n# Final Optimisation Status : Optimal Solution Found\n# Objective Function Being Maximised: 7642.78\n# \nSCHEDULE\n\n SEQUENCE\n\n PARALLEL\n \n RESTORE \"OPTIMIZE_REACTOR_SVS\" ;\n \n RESET\n \n REACT.BATCH_REACTOR.FCW := 0.1;\n \n END\n \n END\n \n ...",t:"Sample gPROMS schedule file (OPTIMISE_REACTOR.SCHEDULE)"},"43":{i:0.0218498482766509,u:"../Content/Topics/x2242.html",a:"# .gOPT segment generated by gOPT for process OPTIMIZE_REACTOR\n# at final solution.\n\nHORIZON \n1000 : 1000 : 1000\n \nINTERVALS \n4\n249.718 : 50 : 350\n159.781 : 50 : 350\n288.055 : 50 : 350\n302.446 : 50 : 350\n \n\n \nPIECEWISE_CONSTANT \nREACT.BATCH_REACTOR.FCW \nINITIAL_PROFILE \n0.1 : 0.1 : 3\n1.84372 : 0.1 : ...",t:"Sample point file (OPTIMISE_REACTOR.point)"},"44":{i:0.0151570565627274,u:"../Content/Topics/x2245.html",a:"UNIT\n React AS BatchReaction\n\nASSIGN\n{ This was the previous ASSIGN section\n # This will be overridden in the Optimisation entity\n WITHIN React.Batch_Reactor DO\n FcW := 0.0 ;\n END\n}\n\n# This is the new one using the first RESET statement\n# from the SCHEDULE file\n REACT.BATCH_REACTOR.FCW:= ...",t:"Simulating the optimal solution within a Process"},"45":{i:0.0118106607057657,u:"../Content/Topics/x2248.html",a:"The purpose here is to explain the detailed meaning of the screen output produced by gPROMS during optimisation, which can be of value in\n determining whether the problem is unsatisfactorily posed, for example. This output is essentially of four kinds. We will review these together with a brief ...",t:"Interpretation of screen output"},"46":{i:0.0138184982199427,u:"../Content/Topics/x515.html",a:"Other constraint types",t:"Other constraint types"},});